<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
	" 
%>
<% 
   CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
   INode node = (INode) codeGenArgument.getArgument();
   String cid = node.getUniqueName();
   boolean useExistingClient = "true".equals(ElementParameterParser.getValue(node, "__USE_EXISTING_CLIENT__"));
   String component = ElementParameterParser.getValue(node, "__DRIVE_COMPONENT__");
   boolean useServiceAccount = "SERVICE_ACCOUNT".equals(ElementParameterParser.getValue(node, "__AUTHENTICATION_METHOD__"));
   boolean useApplicationClientID = "APPLICATION_CLIENT_ID".equals(ElementParameterParser.getValue(node, "__AUTHENTICATION_METHOD__"));
   String clientSecretFile = ElementParameterParser.getValue(node, "__CLIENT_SECRET_FILE__");
   String userEmail = ElementParameterParser.getValue(node, "__USER_ACCOUNT_EMAIL__");
   String applicationName = ElementParameterParser.getValue(node, "__APPLICATION_NAME__");
	String accountEmail = ElementParameterParser.getValue(node, "__SERVICE_ACCOUNT_EMAIL__");
	String keyFile = ElementParameterParser.getValue(node, "__KEY_FILE__");
	String timeout = ElementParameterParser.getValue(node, "__TIMEOUT_IN_SEC__");
	String timeOffset = ElementParameterParser.getValue(node, "__TIME_OFFSET__");
	String keepClient = ElementParameterParser.getValue(node, "__KEEP_CLIENT__");
    boolean makeItThreadSave = "true".equals(ElementParameterParser.getValue(node, "__THREAD_SAVE__"));
	String keepClientName = ElementParameterParser.getValue(node, "__KEEP_CLIENT_KEY__");
	keepClientName = (keepClientName != null && keepClientName.isEmpty() == false ? keepClientName : "\"\"");
	if (makeItThreadSave) {
	    keepClientName = keepClientName + " + Thread.currentThread().getName()";
	}
	String mode = ElementParameterParser.getValue(node, "__MODE__");
	String filterRegex = ElementParameterParser.getValue(node, "__FILE_FILTER_REGEX__");
	if (filterRegex == null || filterRegex.trim().isEmpty()) {
		filterRegex = "null";
	}
	boolean filterRegexCaseSensitive = "true".equals(ElementParameterParser.getValue(node, "__FILE_FILTER_REGEX_CASE_SENSITIVE__"));
	String fileId = ElementParameterParser.getValue(node, "__FILE_ID__");
	String driveFilePath = ElementParameterParser.getValue(node, "__DRIVE_FILE_PATH__");
	boolean ignoreMissing = "true".equals(ElementParameterParser.getValue(node, "__IGNORE_MISSING__"));
	String fileTitle = ElementParameterParser.getValue(node, "__FILE_TITLE__");
	if (fileTitle == null || fileTitle.trim().isEmpty()) {
		fileTitle = "null";
	}
	String localUploadFile = ElementParameterParser.getValue(node, "__LOCAL_FILE_TO_UPLOAD__");
	String remotePath = ElementParameterParser.getValue(node, "__REMOTE_PATH__");
	if (remotePath == null || remotePath.trim().isEmpty()) {
		remotePath = "null";
	}
	boolean createRemoteDir = "true".equals(ElementParameterParser.getValue(node, "__CREATE_REMOTE_PATH__"));
	String qString = ElementParameterParser.getValue(node, "__Q_STRING__");
	if (qString == null || qString.trim().isEmpty()) {
		qString = "null";
	}
	String titleStartsWith = ElementParameterParser.getValue(node, "__REMOTE_FILTER_TITLE_STARTSWITH__");
	if (titleStartsWith == null || titleStartsWith.trim().isEmpty()) {
		titleStartsWith = "null";
	}
	String fullTextSearch = ElementParameterParser.getValue(node, "__REMOTE_FILTER_FULLTEXT__");
	if (fullTextSearch == null || fullTextSearch.trim().isEmpty()) {
		fullTextSearch = "null";
	}
	String remoteSearchPath = ElementParameterParser.getValue(node, "__REMOTE_SEARCH_PATH__");
	if (remoteSearchPath == null || remoteSearchPath.trim().isEmpty()) {
		remoteSearchPath = "null";
	}
	String owner = ElementParameterParser.getValue(node, "__OWNER_EMAIL__");
	if (owner == null || owner.trim().isEmpty()) {
		owner = "null";
	}
	String remoteSearchModifiedFrom = ElementParameterParser.getValue(node, "__REMOTE_FILTER_MODIFYIED_FROM__");
	if (remoteSearchModifiedFrom == null || remoteSearchModifiedFrom.trim().isEmpty()) {
		remoteSearchModifiedFrom = "null";
	}
	String remoteSearchModifiedTo = ElementParameterParser.getValue(node, "__REMOTE_FILTER_MODIFYIED_TO__");
	if (remoteSearchModifiedTo == null || remoteSearchModifiedTo.trim().isEmpty()) {
		remoteSearchModifiedTo = "null";
	}
	boolean includeFolderInResult = "true".equals(ElementParameterParser.getValue(node, "__RETURN_FOLDERS_AS_WELL__"));
	String localFolder = ElementParameterParser.getValue(node, "__LOCAL_TARGET_FOLDER__");
	String localFileName = ElementParameterParser.getValue(node, "__LOCAL_TARGET_FILENAME__");
	if (localFileName == null || localFileName.trim().isEmpty()) {
		localFileName = "null";
	}
	boolean createDirs = "true".equals(ElementParameterParser.getValue(node, "__CREATE_LOCAL_DIR_IF_NOT_EXISTS__"));
	boolean overwrite = "true".equals(ElementParameterParser.getValue(node, "__OVERWRITE__"));
	boolean deleteInFs = "true".equals(ElementParameterParser.getValue(node, "__REMOVE_FROM_LOCAL_FS__"));
	boolean deleteInDrive = "true".equals(ElementParameterParser.getValue(node, "__REMOVE_FROM_DRIVE__"));
    List<? extends IConnection> connsFiles = node.getOutgoingConnections("FILES");
    String filesRowName = null;
    if (connsFiles != null && connsFiles.size() > 0) {
    	IConnection connTemp = connsFiles.get(0);
    	if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    		filesRowName = connTemp.getName();
    	}
    }
    String permOwner = ElementParameterParser.getValue(node, "__PERMISSION_AS_OWNER__");
    boolean permOwnerSendEmail = "true".equals(ElementParameterParser.getValue(node, "__PERMISSION_AS_OWNER_SEND_EMAIL__"));
    String permReader = ElementParameterParser.getValue(node, "__PERMISSION_AS_READER__");
    boolean permReaderSendEmail = "true".equals(ElementParameterParser.getValue(node, "__PERMISSION_AS_READER_SEND_EMAIL__"));
    String permWriter = ElementParameterParser.getValue(node, "__PERMISSION_AS_WRITER__");
    boolean permWriterSendEmail = "true".equals(ElementParameterParser.getValue(node, "__PERMISSION_AS_WRITER_SEND_EMAIL__"));
	 String maxAttempts = ElementParameterParser.getValue(node, "__MAX_ATTEMPTS__");
%>
<%  if (useExistingClient) { %>
    de.jlo.talendcomp.google.drive.DriveHelper <%=cid%> = new de.jlo.talendcomp.google.drive.DriveHelper();
    // use existing drive client
	<%=cid%>.setDriveService((com.google.api.services.drive.Drive) globalMap.get("drive_<%=component%>"));
<%  } else { %>
    // use own client
<%    if ("true".equals(keepClient)) { %>
	de.jlo.talendcomp.google.drive.DriveHelper <%=cid%> = de.jlo.talendcomp.google.drive.DriveHelper.getFromCache(<%=accountEmail%> + <%=keepClientName%> + "<%=cid%>" + jobName);
	if (<%=cid%> == null) {
		<%=cid%> = new de.jlo.talendcomp.google.drive.DriveHelper();
<%    } else { %>
	    de.jlo.talendcomp.google.drive.DriveHelper <%=cid%> = new de.jlo.talendcomp.google.drive.DriveHelper();
<%    } %>
        // create new drive client
        <%=cid%>.setUseServiceAccount(<%=useServiceAccount%>);
        <%=cid%>.setUseApplicationClientID(<%=useApplicationClientID%>);
<%    if (useServiceAccount) { %>
        // setup credentials with service account
		<%=cid%>.setAccountEmail(<%=accountEmail%>);
		<%=cid%>.setKeyFile(<%=keyFile%>);
<%    } else if (useApplicationClientID) { %>
        // setup client with client-Id for native applications
		<%=cid%>.setAccountEmail(<%=userEmail%>);
		<%=cid%>.setClientSecretFile(<%=clientSecretFile%>);
<%    } %> 
<%    if (timeout != null && timeout.trim().isEmpty() == false) { %>
		<%=cid%>.setTimeoutInSeconds(<%=timeout%>);
<%    } %>
<%    if (timeOffset != null && timeOffset.trim().isEmpty() == false) { %>
        // prevent token validation problems caused by time differences between own host and Google
		<%=cid%>.setTimeMillisOffsetToPast(<%=timeOffset%>);
<%    } %>
<%    if (applicationName != null && applicationName.trim().isEmpty() == false) { %>
		<%=cid%>.setApplicationName(<%=applicationName%>);
<%    } %>
		try {
		    // initialize drive client
			<%=cid%>.initializeClient();
		} catch (Exception e) {
			globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
			throw e;
		}
<%    if ("true".equals(keepClient)) { %>
		de.jlo.talendcomp.google.drive.DriveHelper.putIntoCache(<%=accountEmail%> + <%=keepClientName%> + "<%=cid%>" + jobName, <%=cid%>);
   } // (<%=cid%> == null)
<%    } %>
<% } // else if (useExistingClient) %>
   globalMap.put("<%=cid%>", <%=cid%>);
   globalMap.put("drive_<%=cid%>", <%=cid%>.getDriveService());
   int countFiles_<%=cid%> = 0; 
<% if (maxAttempts != null && maxAttempts.trim().isEmpty() == false) { %>
   <%=cid%>.setMaxRetriesInCaseOfErrors(<%=maxAttempts%>);
<% } %>
<% if ("DELETE".equals(mode)) { %>
	// delete a file
    com.google.api.services.drive.model.File file_<%=cid%> = null;
	try {
<% if (fileId != null && fileId.trim().isEmpty() == false) { %>
        String fileId = <%=fileId%>;
	    System.out.println("Delete file id=" + fileId); 
	    // delete file in drive by file-Id
		file_<%=cid%> = <%=cid%>.deleteById(
			fileId, // fileId 
			<%=ignoreMissing%>); // ignoreMissing
<% } else if (driveFilePath != null && driveFilePath.trim().isEmpty() == false) { %>
        String driveFilePath = <%=driveFilePath%>;
	    System.out.println("Delete file path=" + driveFilePath); 
	    // delete file in drive by file path
		file_<%=cid%> = <%=cid%>.deleteByName(
			driveFilePath, // driveFilePath 
			<%=ignoreMissing%>); // ignoreMissing
<% } else { %>
		throw new Exception("No File-Id or File path provided");
<% } %>
		if (file_<%=cid%> != null) {
			globalMap.put("<%=cid%>_FILE_ID", file_<%=cid%>.getId());
			globalMap.put("<%=cid%>_FILE_TITLE", file_<%=cid%>.getTitle());
			if (file_<%=cid%>.getCreatedDate() != null) {
				globalMap.put("<%=cid%>_FILE_CREATED_AT", new java.util.Date(file_<%=cid%>.getCreatedDate().getValue()));
			}
			if (file_<%=cid%>.getModifiedDate() != null) {
				globalMap.put("<%=cid%>_FILE_MODIFIED_AT", new java.util.Date(file_<%=cid%>.getModifiedDate().getValue()));
			}
			globalMap.put("<%=cid%>_FILE_OWNERS", de.jlo.talendcomp.google.drive.DriveHelper.buildChainForUsers(file_<%=cid%>.getOwners(), ","));
			globalMap.put("<%=cid%>_FILE_SIZE", file_<%=cid%>.getFileSize());
			globalMap.put("<%=cid%>_FILE_MIME_TYPE", file_<%=cid%>.getMimeType());
			globalMap.put("<%=cid%>_FILE_IS_FOLDER", de.jlo.talendcomp.google.drive.DriveHelper.isFolder(file_<%=cid%>));
			globalMap.put("<%=cid%>_FILE_EXISTS", true);
		} else {
			globalMap.put("<%=cid%>_FILE_EXISTS", false);
		}
	} catch (Exception e) {
		globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
<% if (filesRowName != null) { %>
	if (file_<%=cid%> != null) {
<% } %>	
<% } else if ("PROPERTIES".equals(mode)) { %>
	// retrieve file properties
    com.google.api.services.drive.model.File file_<%=cid%> = null;
	try {
<% if (fileId != null && fileId.trim().isEmpty() == false) { %>
        String fileId = <%=fileId%>;
	    System.out.println("Get properties from file id=" + fileId); 
	    // read the file metadata by file-Id
		file_<%=cid%> = <%=cid%>.getById(fileId);
<% } else if (driveFilePath != null && driveFilePath.trim().isEmpty() == false) { %>
        String driveFilePath = <%=driveFilePath%>;
	    System.out.println("Get properties from file path=" + driveFilePath); 
	    // read the file metadata by the drive file path
		file_<%=cid%> = <%=cid%>.getByName(driveFilePath);
<% } else { %>
		throw new Exception("No File-Id or File path provided");
<% } %>
		if (file_<%=cid%> != null) {
			globalMap.put("<%=cid%>_FILE_ID", file_<%=cid%>.getId());
			globalMap.put("<%=cid%>_FILE_TITLE", file_<%=cid%>.getTitle());
			if (file_<%=cid%>.getCreatedDate() != null) {
				globalMap.put("<%=cid%>_FILE_CREATED_AT", new java.util.Date(file_<%=cid%>.getCreatedDate().getValue()));
			}
			if (file_<%=cid%>.getModifiedDate() != null) {
				globalMap.put("<%=cid%>_FILE_MODIFIED_AT", new java.util.Date(file_<%=cid%>.getModifiedDate().getValue()));
			}
			globalMap.put("<%=cid%>_FILE_OWNERS", de.jlo.talendcomp.google.drive.DriveHelper.buildChainForUsers(file_<%=cid%>.getOwners(), ","));
			globalMap.put("<%=cid%>_FILE_SIZE", file_<%=cid%>.getFileSize());
			globalMap.put("<%=cid%>_FILE_MIME_TYPE", file_<%=cid%>.getMimeType());
			globalMap.put("<%=cid%>_FILE_IS_FOLDER", de.jlo.talendcomp.google.drive.DriveHelper.isFolder(file_<%=cid%>));
			globalMap.put("<%=cid%>_FILE_EXISTS", true);
		} else {
			globalMap.put("<%=cid%>_FILE_EXISTS", false);
		}
	} catch (Exception e) {
		globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
<% if (filesRowName != null) { %>
	if (file_<%=cid%> != null) {
<% } %>	
<% } else if ("MOVE".equals(mode)) { %>
	// Move file
    com.google.api.services.drive.model.File file_<%=cid%> = null;
	try {
        String remotePath = <%=remotePath%>;
<% if (fileId != null && fileId.trim().isEmpty() == false) { %>
        String fileId = <%=fileId%>;
	    System.out.println("Move file with id=" + fileId); 
	    // move the file by file-Id
		file_<%=cid%> = <%=cid%>.moveToFolderById(
									fileId,           // file-id
									remotePath,       // remotePath
									<%=createRemoteDir%>); // createRemoteDir
<% } else if (driveFilePath != null && driveFilePath.trim().isEmpty() == false) { %>
        String driveFilePath = <%=driveFilePath%>;
	    System.out.println("Move file with path=" + driveFilePath); 
	    // move the file by file-Id
		file_<%=cid%> = <%=cid%>.moveToFolderByName(
									driveFilePath,    // driveFilePath
									remotePath,       // remotePath
									<%=createRemoteDir%>); // createRemoteDir
<% } else { %>
		throw new Exception("No File-Id or File path provided");
<% } %>
		if (file_<%=cid%> != null) {
			globalMap.put("<%=cid%>_FILE_ID", file_<%=cid%>.getId());
			globalMap.put("<%=cid%>_FILE_TITLE", file_<%=cid%>.getTitle());
			if (file_<%=cid%>.getCreatedDate() != null) {
				globalMap.put("<%=cid%>_FILE_CREATED_AT", new java.util.Date(file_<%=cid%>.getCreatedDate().getValue()));
			}
			if (file_<%=cid%>.getModifiedDate() != null) {
				globalMap.put("<%=cid%>_FILE_MODIFIED_AT", new java.util.Date(file_<%=cid%>.getModifiedDate().getValue()));
			}
			globalMap.put("<%=cid%>_FILE_OWNERS", de.jlo.talendcomp.google.drive.DriveHelper.buildChainForUsers(file_<%=cid%>.getOwners(), ","));
			globalMap.put("<%=cid%>_FILE_SIZE", file_<%=cid%>.getFileSize());
			globalMap.put("<%=cid%>_FILE_MIME_TYPE", file_<%=cid%>.getMimeType());
			globalMap.put("<%=cid%>_FILE_IS_FOLDER", de.jlo.talendcomp.google.drive.DriveHelper.isFolder(file_<%=cid%>));
			globalMap.put("<%=cid%>_FILE_EXISTS", true);
		} else {
			globalMap.put("<%=cid%>_FILE_EXISTS", false);
		}
	} catch (Exception e) {
		globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
<% if (filesRowName != null) { %>
	if (file_<%=cid%> != null) {
<% } %>	
<% } else if ("UPLOAD".equals(mode)) { %>
	// upload a file
    com.google.api.services.drive.model.File file_<%=cid%> = null;
	try {
	    String localFilePath = <%=localUploadFile%>;
        String remotePath = <%=remotePath%>;
	    String fileTitle = <%=fileTitle%>;
	    System.out.println("Upload file " + localFilePath); 
		file_<%=cid%> = <%=cid%>.upload(
		    localFilePath, // localUploadFile
			fileTitle,       // title
			remotePath,      // remotePath
			<%=createRemoteDir%>, // createRemoteDir
			<%=overwrite%>);      // overwrite
		if (file_<%=cid%> != null) {
<%  if (permOwner != null && permOwner.trim().isEmpty() == false) { %>
   			<%=cid%>.setPermissionAsOwner(file_<%=cid%>.getId(), <%=permOwner%>, <%=permOwnerSendEmail%>);
<%  } %>
<%  if (permReader != null && permReader.trim().isEmpty() == false) { %>
   			<%=cid%>.setPermissionAsReader(file_<%=cid%>.getId(), <%=permReader%>, <%=permReaderSendEmail%>);
<%  } %>
<%  if (permWriter != null && permWriter.trim().isEmpty() == false) { %>
   			<%=cid%>.setPermissionAsWriter(file_<%=cid%>.getId(), <%=permWriter%>, <%=permWriterSendEmail%>);
<%  } %>
			globalMap.put("<%=cid%>_FILE_ID", file_<%=cid%>.getId());
			globalMap.put("<%=cid%>_FILE_TITLE", file_<%=cid%>.getTitle());
			if (file_<%=cid%>.getCreatedDate() != null) {
				globalMap.put("<%=cid%>_FILE_CREATED_AT", new java.util.Date(file_<%=cid%>.getCreatedDate().getValue()));
			}
			if (file_<%=cid%>.getModifiedDate() != null) {
				globalMap.put("<%=cid%>_FILE_MODIFIED_AT", new java.util.Date(file_<%=cid%>.getModifiedDate().getValue()));
			}
			globalMap.put("<%=cid%>_FILE_OWNERS", de.jlo.talendcomp.google.drive.DriveHelper.buildChainForUsers(file_<%=cid%>.getOwners(), ","));
			globalMap.put("<%=cid%>_FILE_SIZE", file_<%=cid%>.getFileSize());
			globalMap.put("<%=cid%>_FILE_MIME_TYPE", file_<%=cid%>.getMimeType());
			globalMap.put("<%=cid%>_FILE_IS_FOLDER", de.jlo.talendcomp.google.drive.DriveHelper.isFolder(file_<%=cid%>));
		}
<%  if (deleteInFs) { %>
        java.io.File f = new java.io.File(localUploadFile);
		System.out.println("Delete local source file " + f.getAbsolutePath());
		f.delete();
<%  } %>
	} catch (Exception e) {
		globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
<% if (filesRowName != null) { %>
	if (file_<%=cid%> != null) {
<% } %>	
<% } else if ("DOWNLOAD".equals(mode)) { %>
	// download a file
    com.google.api.services.drive.model.File file_<%=cid%> = null;
	try {
	    globalMap.remove("<%=cid%>_DOWNLOADED_FILEPATH");
	    globalMap.remove("<%=cid%>_DOWNLOADED_FILESIZE");
        String localFolder = <%=localFolder%>;
        String localFileName = <%=localFileName%>;
<% if (fileId != null && fileId.trim().isEmpty() == false) { %>
        String fileId = <%=fileId%>;
	    System.out.println("Download file id=" + fileId + " to " + localFolder); 
	    // download the drive file by the file-Id
		file_<%=cid%> = <%=cid%>.downloadById(
			fileId, // fileId 
			localFolder, // localFolder
			localFileName, // localFileName
			<%=createDirs%>); // createDirs
<% } else if (driveFilePath != null && driveFilePath.trim().isEmpty() == false) { %>
        String driveFilePath = <%=driveFilePath%>;
	    System.out.println("Get properties from file path=" + driveFilePath); 
	    // download the file by its drive file path
		file_<%=cid%> = <%=cid%>.downloadByName(
			driveFilePath, // driveFilePath 
			localFolder,  // localFolder
			localFileName, // localFileName
			<%=createDirs%>);  // createDirs
<% } else { %>
		throw new Exception("No File-Id or File path provided");
<% } %>
		if (file_<%=cid%> != null) {
			globalMap.put("<%=cid%>_DOWNLOADED_FILEPATH", <%=cid%>.getLastDownloadedFilePath());
			globalMap.put("<%=cid%>_DOWNLOADED_FILESIZE", <%=cid%>.getLastDownloadedFileSize());
			globalMap.put("<%=cid%>_FILE_ID", file_<%=cid%>.getId());
			globalMap.put("<%=cid%>_FILE_TITLE", file_<%=cid%>.getTitle());
			if (file_<%=cid%>.getCreatedDate() != null) {
				globalMap.put("<%=cid%>_FILE_CREATED_AT", new java.util.Date(file_<%=cid%>.getCreatedDate().getValue()));
			}
			if (file_<%=cid%>.getModifiedDate() != null) {
				globalMap.put("<%=cid%>_FILE_MODIFIED_AT", new java.util.Date(file_<%=cid%>.getModifiedDate().getValue()));
			}
			globalMap.put("<%=cid%>_FILE_OWNERS", de.jlo.talendcomp.google.drive.DriveHelper.buildChainForUsers(file_<%=cid%>.getOwners(), ","));
			globalMap.put("<%=cid%>_FILE_SIZE", file_<%=cid%>.getFileSize());
			globalMap.put("<%=cid%>_FILE_MIME_TYPE", file_<%=cid%>.getMimeType());
			globalMap.put("<%=cid%>_FILE_IS_FOLDER", de.jlo.talendcomp.google.drive.DriveHelper.isFolder(file_<%=cid%>));
<%	if (deleteInDrive) { %>
	        System.out.println("Delete downloaded file with id=" + file_<%=cid%>.getId() + " from drive");
			<%=cid%>.deleteById(file_<%=cid%>.getId(), false);
<% } %>
		}
		globalMap.put("<%=cid%>_FILE_EXISTS", true);
	} catch (Exception e) {
		globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
<% if (filesRowName != null) { %>
	if (file_<%=cid%> != null) {
<% } %>	
<% } else if ("LIST".equals(mode)) { %>
	// list files
	java.util.List<com.google.api.services.drive.model.File> fileList_<%=cid%> = null;
	try {
	    System.out.println("List files"); 
	    // list the files metadata
		fileList_<%=cid%> = <%=cid%>.list(
			<%=filterRegex%>, // filterRegex
			<%=filterRegexCaseSensitive%>, // filterRegexCaseSensitive 
			<%=qString%>, // q-string
			<%=titleStartsWith%>, // titleStartsWith
			<%=fullTextSearch%>, // fullTextSearch
			<%=remoteSearchModifiedFrom%>, // remoteSearchModifiedFrom
			<%=remoteSearchModifiedTo%>, // remoteSearchModifiedTo
			<%=owner%>, // owner
			<%=includeFolderInResult%>, // includeFolderInResult
			<%=remoteSearchPath%>);  // remoteSearchPath
	} catch (Exception e) {
		globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
<% if (filesRowName != null) { %>
	for (com.google.api.services.drive.model.File file_<%=cid%> : fileList_<%=cid%>) {	
		globalMap.put("<%=cid%>_FILE_ID", file_<%=cid%>.getId());
		globalMap.put("<%=cid%>_FILE_TITLE", file_<%=cid%>.getTitle());
		if (file_<%=cid%>.getCreatedDate() != null) {
			globalMap.put("<%=cid%>_FILE_CREATED_AT", new java.util.Date(file_<%=cid%>.getCreatedDate().getValue()));
		}
		if (file_<%=cid%>.getModifiedDate() != null) {
			globalMap.put("<%=cid%>_FILE_MODIFIED_AT", new java.util.Date(file_<%=cid%>.getModifiedDate().getValue()));
		}
		globalMap.put("<%=cid%>_FILE_OWNERS", de.jlo.talendcomp.google.drive.DriveHelper.buildChainForUsers(file_<%=cid%>.getOwners(), ","));
		globalMap.put("<%=cid%>_FILE_SIZE", file_<%=cid%>.getId());
		globalMap.put("<%=cid%>_FILE_MIME_TYPE", file_<%=cid%>.getMimeType());
		globalMap.put("<%=cid%>_FILE_IS_FOLDER", de.jlo.talendcomp.google.drive.DriveHelper.isFolder(file_<%=cid%>));
<% } %>	
<% } // else if ("LIST".equals(mode)) %>
<% if ("CLIENT".equals(mode) == false && filesRowName != null) { %>
	    <%=filesRowName%> = new <%=filesRowName%>Struct();
		<%=filesRowName%>.FILE_ID = file_<%=cid%>.getId();
		<%=filesRowName%>.FILE_TITLE = file_<%=cid%>.getTitle();
		<%=filesRowName%>.ORIGINAL_FILE_NAME = file_<%=cid%>.getOriginalFilename();
		<%=filesRowName%>.FILE_EXTENSION = file_<%=cid%>.getFileExtension();
		if (file_<%=cid%>.getCreatedDate() != null) {
			<%=filesRowName%>.FILE_CREATED_AT = new java.util.Date(file_<%=cid%>.getCreatedDate().getValue());
		}
		if (file_<%=cid%>.getModifiedDate() != null) {
			<%=filesRowName%>.FILE_LAST_MODIFIED_AT = new java.util.Date(file_<%=cid%>.getModifiedDate().getValue());
		}
		<%=filesRowName%>.FILE_MIME_TYPE = file_<%=cid%>.getMimeType();
		<%=filesRowName%>.FILE_DOWNLOAD_URL = file_<%=cid%>.getDownloadUrl();
		<%=filesRowName%>.FILE_WEB_CONTENT_LINK = file_<%=cid%>.getWebContentLink();
		<%=filesRowName%>.FILE_SIZE = file_<%=cid%>.getFileSize();
		<%=filesRowName%>.FILE_OWNERS = de.jlo.talendcomp.google.drive.DriveHelper.buildChainForUsers(file_<%=cid%>.getOwners(), ",");
		<%=filesRowName%>.FILE_IS_FOLDER = de.jlo.talendcomp.google.drive.DriveHelper.isFolder(file_<%=cid%>);
<% } %>	
	